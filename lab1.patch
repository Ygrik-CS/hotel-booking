From 1111111111111111111111111111111111111111 Mon Sep 17 00:00:00 2001
From: ChatGPT <chatgpt@example.com>
Date: Sat, 20 Sep 2025 18:00:00 +0500
Subject: [PATCH] Lab1: domain, transforms, UI, tests, seed, config

---
 requirements.txt             |  4 +++
 pyproject.toml                |  9 ++++++
 README.md                     | 27 +++++++++++++++++
 app/main.py                   | 36 ++++++++++++++++++++++
 core/domain.py                | 96 +++++++++++++++++++++++++++++++++++++++++++
 core/transforms.py            | 94 +++++++++++++++++++++++++++++++++++++++++
 data/seed.json                | 25 +++++++++++++
 tests/test_lab1_core.py       | 51 ++++++++++++++++++++++++++
 8 files changed, 342 insertions(+)
 create mode 100644 requirements.txt
 create mode 100644 pyproject.toml
 create mode 100644 README.md
 create mode 100644 app/main.py
 create mode 100644 core/domain.py
 create mode 100644 core/transforms.py
 create mode 100644 data/seed.json
 create mode 100644 tests/test_lab1_core.py

diff --git a/requirements.txt b/requirements.txt
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/requirements.txt
@@
+streamlit
+pytest
+black
+ruff
diff --git a/pyproject.toml b/pyproject.toml
new file mode 100644
index 0000000..2222222
--- /dev/null
+++ b/pyproject.toml
@@
+[tool.black]
+line-length = 88
+target-version = ["py311"]
+
+[tool.ruff]
+line-length = 88
+select = ["E", "F", "W", "C", "B", "TC"]
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..3333333
--- /dev/null
+++ b/README.md
@@
+# ЛР №1 — Чистые функции, неизменяемость, HOF (4 балла)
+
+## Куда смотреть
+- core/domain.py — доменные сущности (dataclass(frozen=True))
+- core/transforms.py — чистые функции, map/filter/reduce, HOF
+- app/main.py — Streamlit SPA (Overview · Data · Functional Core)
+- tests/test_lab1_core.py — тесты pytest (>=5)
+- data/seed.json — пример seed
+
+## Запуск (Windows)
+```bash
+python -m venv .venv
+.venv\Scripts\activate
+pip install -r requirements.txt
+streamlit run app/main.py
+pytest -q
+ruff check .
+black --check .
+```
diff --git a/app/main.py b/app/main.py
new file mode 100644
index 0000000..4444444
--- /dev/null
+++ b/app/main.py
@@
+import streamlit as st
+from core.transforms import load_seed
+
+st.set_page_config(layout="wide", page_title="Booking SPA - Lab1")
+
+menu = st.sidebar.selectbox("Menu", ["Overview", "Data", "Functional Core"])
+
+@st.cache_data
+def load_data(path="data/seed.json"):
+    return load_seed(path)
+
+hotels, room_types, rate_plans, prices, availability, guests = load_data()
+
+if menu == "Overview":
+    st.title("Overview")
+    st.metric("Hotels", len(hotels))
+    st.metric("Room types", len(room_types))
+    st.metric("Rate plans", len(rate_plans))
+    st.metric("Price records", len(prices))
+elif menu == "Data":
+    st.title("Data")
+    st.subheader("Hotels (sample)")
+    for h in hotels[:10]:
+        st.write(h)
+    st.subheader("Prices (sample)")
+    for p in prices[:20]:
+        st.write(p)
+elif menu == "Functional Core":
+    st.title("Functional Core")
+    st.write("Демонстрация функций hold_item, remove_hold, nightly_sum")
diff --git a/core/domain.py b/core/domain.py
new file mode 100644
index 0000000..5555555
--- /dev/null
+++ b/core/domain.py
@@
+from dataclasses import dataclass
+from typing import Tuple, Dict, Any
+
+@dataclass(frozen=True)
+class Hotel:
+    id: str
+    name: str
+    stars: int
+    city: str
+    features: Tuple[str, ...]
+
+@dataclass(frozen=True)
+class RoomType:
+    id: str
+    hotel_id: str
+    name: str
+    capacity: int
+    beds: Tuple[str, ...]
+    features: Tuple[str, ...]
+
+@dataclass(frozen=True)
+class RatePlan:
+    id: str
+    hotel_id: str
+    room_type_id: str
+    title: str
+    meal: str
+    refundable: bool
+    cancel_before_days: int | None
+
+@dataclass(frozen=True)
+class Price:
+    id: str
+    rate_id: str
+    date: str
+    amount: int
+    currency: str
+
+@dataclass(frozen=True)
+class Availability:
+    id: str
+    room_type_id: str
+    date: str
+    available: int
+
+@dataclass(frozen=True)
+class Guest:
+    id: str
+    name: str
+    email: str
+
+@dataclass(frozen=True)
+class CartItem:
+    id: str
+    hotel_id: str
+    room_type_id: str
+    rate_id: str
+    checkin: str
+    checkout: str
+    guests: int
+
+@dataclass(frozen=True)
+class Booking:
+    id: str
+    guest_id: str
+    items: Tuple[CartItem, ...]
+    total: int
+    status: str
+
+@dataclass(frozen=True)
+class Payment:
+    id: str
+    booking_id: str
+    amount: int
+    ts: str
+    method: str
+
+@dataclass(frozen=True)
+class Event:
+    id: str
+    ts: str
+    name: str
+    payload: Dict[str, Any]
+
+@dataclass(frozen=True)
+class Rule:
+    id: str
+    kind: str
+    payload: Dict[str, Any]
diff --git a/core/transforms.py b/core/transforms.py
new file mode 100644
index 0000000..6666666
--- /dev/null
+++ b/core/transforms.py
@@
+import json
+from typing import Tuple, Iterable, Callable
+from functools import reduce
+from datetime import date, timedelta
+from .domain import Hotel, RoomType, RatePlan, Price, Availability, Guest, CartItem
+
+def load_seed(path: str) -> Tuple:
+    with open(path, "r", encoding="utf-8") as f:
+        raw = json.load(f)
+    hotels = tuple(Hotel(**h) for h in raw.get("hotels", []))
+    room_types = tuple(RoomType(**r) for r in raw.get("room_types", []))
+    rate_plans = tuple(RatePlan(**rp) for rp in raw.get("rate_plans", []))
+    prices = tuple(Price(**p) for p in raw.get("prices", []))
+    availability = tuple(Availability(**a) for a in raw.get("availability", []))
+    guests = tuple(Guest(**g) for g in raw.get("guests", []))
+    return hotels, room_types, rate_plans, prices, availability, guests
+
+def date_range(start_iso: str, end_iso: str) -> Iterable[str]:
+    a = date.fromisoformat(start_iso)
+    b = date.fromisoformat(end_iso)
+    cur = a
+    while cur < b:
+        yield cur.isoformat()
+        cur = cur + timedelta(days=1)
+
+def hold_item(cart: Tuple[CartItem, ...], item: CartItem) -> Tuple[CartItem, ...]:
+    filtered = tuple(ci for ci in cart if ci.id != item.id)
+    return (*filtered, item)
+
+def remove_hold(cart: Tuple[CartItem, ...], item_id: str) -> Tuple[CartItem, ...]:
+    return tuple(ci for ci in cart if ci.id != item_id)
+
+def nightly_sum(prices: Tuple[Price, ...], checkin: str, checkout: str, rate_id: str) -> int:
+    price_map = {(p.rate_id, p.date): p.amount for p in prices}
+    def acc(total: int, d_iso: str) -> int:
+        key = (rate_id, d_iso)
+        if key not in price_map:
+            raise ValueError(f"price not found for rate {rate_id} on {d_iso}")
+        return total + price_map[key]
+    return reduce(lambda acc_val, d: acc(acc_val, d), date_range(checkin, checkout), 0)
+
+def make_rate_price_predicate(min_amount: int = 0, max_amount: int | None = None) -> Callable[[Price], bool]:
+    if max_amount is None:
+        return lambda p: p.amount >= min_amount
+    return lambda p: min_amount <= p.amount <= max_amount
diff --git a/data/seed.json b/data/seed.json
new file mode 100644
index 0000000..7777777
--- /dev/null
+++ b/data/seed.json
@@
+{
+  "hotels": [
+    {"id": "h1", "name": "Hotel A", "stars": 4, "city": "CityX", "features": ["pool","wifi"]}
+  ],
+  "room_types": [
+    {"id": "rt1", "hotel_id": "h1", "name": "Standard", "capacity": 2, "beds": ["double"], "features": ["balcony"]}
+  ],
+  "rate_plans": [
+    {"id": "r1", "hotel_id": "h1", "room_type_id": "rt1", "title": "Standard Non-Refund", "meal": "RO", "refundable": false, "cancel_before_days": null}
+  ],
+  "prices": [
+    {"id": "p1", "rate_id": "r1", "date": "2025-09-20", "amount": 5000, "currency": "KZT"}
+  ],
+  "availability": [
+    {"id": "a1", "room_type_id": "rt1", "date": "2025-09-20", "available": 3}
+  ],
+  "guests": [
+    {"id": "g1", "name": "Ivan", "email": "ivan@example.com"}
+  ]
+}
diff --git a/tests/test_lab1_core.py b/tests/test_lab1_core.py
new file mode 100644
index 0000000..8888888
--- /dev/null
+++ b/tests/test_lab1_core.py
@@
+import pytest
+from core.transforms import load_seed, hold_item, remove_hold, nightly_sum, make_rate_price_predicate
+from core.domain import CartItem, Price
+import json
+
+def test_load_seed_roundtrip(tmp_path):
+    sample = {"hotels": [], "room_types": [], "rate_plans": [], "prices": [], "availability": [], "guests": []}
+    p = tmp_path / "seed.json"
+    p.write_text(json.dumps(sample), encoding="utf-8")
+    h, rt, rp, pr, av, g = load_seed(str(p))
+    assert isinstance(h, tuple) and isinstance(pr, tuple)
+
+def test_hold_and_remove_item():
+    cart = tuple()
+    item = CartItem("ci1","h1","rt1","r1","2025-09-20","2025-09-22",2)
+    new_cart = hold_item(cart, item)
+    assert new_cart == (item,)
+    assert cart == tuple()
+    removed = remove_hold(new_cart, "ci1")
+    assert removed == ()
+
+def test_nightly_sum_simple():
+    prices = (
+        Price(id="p1", rate_id="r1", date="2025-09-20", amount=1000, currency="KZT"),
+        Price(id="p2", rate_id="r1", date="2025-09-21", amount=1200, currency="KZT"),
+    )
+    total = nightly_sum(prices, "2025-09-20", "2025-09-22", "r1")
+    assert total == 2200
+
+def test_nightly_sum_missing_price():
+    prices = (Price(id="p1", rate_id="r1", date="2025-09-20", amount=1000, currency="KZT"),)
+    with pytest.raises(ValueError):
+        nightly_sum(prices, "2025-09-20", "2025-09-22", "r1")
+
+def test_price_predicate_pipeline():
+    prices = (
+        Price(id="p1", rate_id="r1", date="2025-09-20", amount=5000, currency="KZT"),
+        Price(id="p2", rate_id="r2", date="2025-09-20", amount=2000, currency="KZT"),
+    )
+    pred = make_rate_price_predicate(3000)
+    filtered = tuple(filter(pred, prices))
+    assert len(filtered) == 1
+    assert filtered[0].rate_id == "r1"
-- 
2.45.2

